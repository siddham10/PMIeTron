trigger:
  branches:
    include:
      - main

variables:
  ZIP_NODE: ${{ format('{0}.zip', variables['Build.SourceBranchName']) }}
  ZIP_WORKFLOW: postdeployment.zip
  JSON_INCLUDE_FILE_PATH: '$(Pipeline.Workspace)/deployment-artifacts/includedfile.json'
  ZIP_FILE_PATH: '$(Pipeline.Workspace)/$(ZIP_NODE)'
  ZIP_WORKFLOW_FILE_PATH: '$(Pipeline.Workspace)/$(ZIP_WORKFLOW)'

stages:
  - stage: Initialization
    displayName: 'Initialization'
    jobs:
      - job: InitializationJob
        displayName: 'Initialization'
        steps:
          - script: |
              echo "ZIP_NODE: $(ZIP_NODE)"
              echo "ZIP_WORKFLOW: $(ZIP_WORKFLOW)"
              echo "JSON_INCLUDE_FILE_PATH: $(JSON_INCLUDE_FILE_PATH)"
              echo "ZIP_FILE_PATH: $(ZIP_FILE_PATH)"
              echo "ZIP_WORKFLOW_FILE_PATH: $(ZIP_WORKFLOW_FILE_PATH)"
            displayName: 'Initialization'

  - stage: prepare-package
    displayName: 'Prepare Package'
    jobs:
      - job: PreparePackageJob
        displayName: 'Prepare Package'
        steps:
          - script: |
              includedfile=""
              includedFilenamesString=$(cat "$(JSON_INCLUDE_FILE_PATH)")
              IFS=',' read -ra filenames <<< "$includedFilenamesString"
              for filename in "${filenames[@]}"; do
                includedfile+="'$(Pipeline.Workspace)/$filename',"
              done
              includedfile=${includedfile%?}

              echo "Final included files: $includedfile"
              echo "Filenames processed successfully... Moving to zipping.."

              rm -f "$(ZIP_FILE_PATH)"
              zip -r "$(ZIP_FILE_PATH)" $includedfile

              if [ ! -f "$(ZIP_FILE_PATH)" ]; then
                echo "Failed to create the zip file."
                exit 1
              else
                echo "Files zipped successfully..."
              fi
            displayName: 'Prepare Package'

  - stage: creating-folder
    displayName: 'Creating Folder'
    jobs:
      - job: CreatingFolderJob
        displayName: 'Creating Folder'
        steps:
          - script: |
              jsonobject="{\"binaryStreamObject\":{\"id\":\"guid\",\"type\":\"seedDataStream\",\"properties\":{\"objectKey\":\"$(ZIP_NODE)\",\"originalFileName\":\"$(ZIP_NODE)\"}}}"
              response=$(curl -X POST \
                -H 'Content-Type: application/json' \
                -H 'x-rdp-version: 8.1' \
                -H 'x-rdp-tenantId: etronds' \
                -H 'x-rdp-clientId: rdpclient' \
                -H 'x-rdp-userId: etronds.systemadmin@riversand.com' \
                -H 'x-rdp-userRoles: systemadmin' \
                -H 'auth-client-id: j29DTHa7m7VHucWbHg7VvYA75pUjBopS' \
                -H 'auth-client-secret: J7UaRWQgxorI8mdfuu8y0mOLqzlIJo2hM3O4VfhX1PIeoa7CYVX_l0-BnHRtuSWB' \
                -d "$jsonobject" \
                'https://etronds.riversand.com/api/binarystreamobjectservice/prepareUpload')

              fileuploadUrl=$(echo "$response" | jq -r '.response.binaryStreamObjects[].data[] | select(contains("uploadURL")) | ltrimstr("uploadURL=") | rtrimstr("}")]')

              echo "fileuploadUrl: $fileuploadUrl"
            displayName: 'Creating Folder'

  - stage: Deploying-folder
    displayName: 'Deploying Folder'
    jobs:
      - job: DeployingFolderJob
        displayName: 'Deploying Folder'
        steps:
          - script: |
              curl -v -X PUT "$fileuploadUrl" \
                --header "x-ms-meta-x_rdp_userroles: systemadmin" \
                --header "x-ms-meta-x_rdp_tenantid: etronds" \
                --header "x-ms-meta-originalfilename: $(ZIP_NODE)" \
                --header "x-ms-blob-content-disposition: attachment; filename=$(ZIP_NODE)" \
                --header "x-ms-meta-type: disposition" \
                --header "x-ms-meta-x_rdp_clientid: rdpclient" \
                --header "x-ms-meta-x_rdp_userid: etronds.systemadmin@riversand.com" \
                --header "x-ms-meta-binarystreamobjectid: guid" \
                --header "x-ms-blob-type: BlockBlob" \
                --header "Content-Type: application/zip" \
                --data-binary "@$(ZIP_FILE_PATH)"
            displayName: 'Deploying Folder'

  - stage: Deployment-into-tenant
    displayName: 'Deployment into Tenant'
    jobs:
      - job: DeploymentIntoTenantJob
        displayName: 'Deployment into Tenant'
        steps:
          - script: |
              jsonobject="{\"adminObject\":{\"id\":\"someguid\",\"type\":\"adminObject\",\"properties\":{\"flushConfig\":false,\"storageType\":\"stream\",\"objectKey\":\"$(ZIP_NODE)\",\"tenantId\":\"etronds\",\"retryCount\":1,\"sleepTime\":1000}}}"
              response=$(curl -X POST \
                -H 'Content-Type: application/json' \
                -H 'x-rdp-version: 8.1' \
                -H 'x-rdp-tenantId: etronds' \
                -H 'x-rdp-clientId: rdpclient' \
                -H 'x-rdp-userId: etronds.systemadmin@riversand.com' \
                -H 'x-rdp-userRoles: systemadmin' \
                -H 'auth-client-id: j29DTHa7m7VHucWbHg7VvYA75pUjBopS' \
                -H 'auth-client-secret: J7UaRWQgxorI8mdfuu8y0mOLqzlIJo2hM3O4VfhX1PIeoa7CYVX_l0-BnHRtuSWB' \
                -d "$jsonobject" \
                'https://etronds.riversand.com/api/adminservice/deploytenantseed')

              status=$(echo "$response" | jq -r '.response.status')
              taskID=$(echo "$response" | jq -r '.response.statusDetail.taskId')
              totalRecords=$(echo "$response" | jq -r '.response.totalRecords')

              echo "Status: $status"
              echo "Task ID: $taskID"
              echo "Total Records: $totalRecords"
            displayName: 'Deployment into Tenant'
